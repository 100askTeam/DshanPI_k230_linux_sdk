From 6cabd176cf9a3c0d1ff9b76d1602fb59a9386a72 Mon Sep 17 00:00:00 2001
From: wangjianxin <wangjianxin@canaan-creative.com>
Date: Tue, 11 Jun 2024 16:47:17 +0800
Subject: [PATCH 06/20] add canaan hardlock driver

---
 drivers/Kconfig                           |   2 +
 drivers/Makefile                          |   2 +
 drivers/canaan-hardlock/Kconfig           |   7 ++
 drivers/canaan-hardlock/Makefile          |   6 ++
 drivers/canaan-hardlock/canaan-hardlock.c | 110 ++++++++++++++++++++++
 5 files changed, 127 insertions(+)
 create mode 100644 drivers/canaan-hardlock/Kconfig
 create mode 100644 drivers/canaan-hardlock/Makefile
 create mode 100644 drivers/canaan-hardlock/canaan-hardlock.c

diff --git a/drivers/Kconfig b/drivers/Kconfig
index efb66e25f..9b5e7f26f 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -243,4 +243,6 @@ source "drivers/hte/Kconfig"
 
 source "drivers/cdx/Kconfig"
 
+source "drivers/canaan-hardlock/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 1bec7819a..fb5160478 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -199,3 +199,5 @@ obj-$(CONFIG_DRM_ACCEL)		+= accel/
 obj-$(CONFIG_CDX_BUS)		+= cdx/
 
 obj-$(CONFIG_S390)		+= s390/
+
+obj-y				+= canaan-hardlock/
diff --git a/drivers/canaan-hardlock/Kconfig b/drivers/canaan-hardlock/Kconfig
new file mode 100644
index 000000000..497ee57cf
--- /dev/null
+++ b/drivers/canaan-hardlock/Kconfig
@@ -0,0 +1,7 @@
+menu "canaan-hardlock"
+
+
+config CANAAN_HARDLOCK
+	bool "canaan hardlock driver"
+
+endmenu
diff --git a/drivers/canaan-hardlock/Makefile b/drivers/canaan-hardlock/Makefile
new file mode 100644
index 000000000..df997863b
--- /dev/null
+++ b/drivers/canaan-hardlock/Makefile
@@ -0,0 +1,6 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# Makefile for the hardlock drivers.
+#
+
+obj-$(CONFIG_CANAAN_HARDLOCK)		+= canaan-hardlock.o
diff --git a/drivers/canaan-hardlock/canaan-hardlock.c b/drivers/canaan-hardlock/canaan-hardlock.c
new file mode 100644
index 000000000..60bdea7b1
--- /dev/null
+++ b/drivers/canaan-hardlock/canaan-hardlock.c
@@ -0,0 +1,110 @@
+/* Copyright (c) 2023, Canaan Bright Sight Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+#include <linux/kernel.h>
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+#include <linux/canaan-hardlock.h>
+
+#define CANAAN_DRIVER_NAME	"hard-lock"
+
+struct canaan_hardlock {
+    void __iomem *base;
+    char used[HARDLOCK_MAX];
+};
+
+static struct canaan_hardlock *hardlock;
+
+int hardlock_lock(int num)
+{
+    if (num < 0 || num > HARDLOCK_MAX)
+        return -1;
+
+    if (!readl(hardlock->base + num * 0x4))
+    {
+        pr_debug("hardlock-%d locked\n", num);
+        return 0;
+    }
+    pr_debug("hardlock-%d is busy\n", num);
+    return -1;
+}
+EXPORT_SYMBOL(hardlock_lock);
+
+int hardlock_unlock(int num)
+{
+    if (num < 0 || num > HARDLOCK_MAX)
+        return -1;
+
+    if (readl(hardlock->base + num * 0x4))
+    {
+        writel(0x0, hardlock->base + num * 0x4);
+        pr_debug("hardlock-%d unlock\n", num);
+        return 0;
+    }
+    pr_err("hardlock-%d unlock failed\n", num);
+    return -1;
+}
+EXPORT_SYMBOL(hardlock_unlock);
+
+int request_lock(int num)
+{
+    if (num < 0 || num > HARDLOCK_MAX)
+        return -1;
+
+    if (!hardlock->used[num])
+    {
+        hardlock->used[num] = 1;
+        return 0;
+    }
+
+    pr_err("request hardlock failed, hardlock-%d is used\n", num);
+    return -1;
+}
+EXPORT_SYMBOL(request_lock);
+
+static int canaan_hardlock_probe(struct platform_device *pdev)
+{
+    struct resource *reg;
+
+    hardlock = devm_kzalloc(&pdev->dev, sizeof(*hardlock), GFP_KERNEL);
+    if (!hardlock)
+        return -ENOMEM;
+
+    reg = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    hardlock->base = 0xa0 + devm_ioremap_resource(&pdev->dev, reg); /* hardlock offset */
+    if (IS_ERR(hardlock->base))
+        return PTR_ERR(hardlock->base);
+
+    platform_set_drvdata(pdev, hardlock);
+    printk( "Canaan Hard Lock Driver init.\n");
+    return 0;
+}
+
+static const struct of_device_id canaan_hardlock_match[] = {
+    { .compatible = "canaan,k230-hardlock"},
+    { }
+};
+
+static struct platform_driver canaan_hardlock_driver = {
+    .driver = {
+        .name = CANAAN_DRIVER_NAME,
+        .of_match_table = of_match_ptr(canaan_hardlock_match),
+    },
+    .probe = canaan_hardlock_probe,
+};
+
+static int __init hardlock_init(void)
+{
+    int ret;
+	ret = platform_driver_register(&canaan_hardlock_driver);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+subsys_initcall(hardlock_init);
-- 
2.39.1

